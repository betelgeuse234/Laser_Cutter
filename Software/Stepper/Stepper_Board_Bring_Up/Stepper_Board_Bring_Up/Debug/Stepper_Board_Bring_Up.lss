
Stepper_Board_Bring_Up.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000f0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000144  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000174  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007c2  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006c7  00000000  00000000  0000099e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002d7  00000000  00000000  00001065  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  0000133c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003c8  00000000  00000000  00001370  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d3  00000000  00000000  00001738  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000180b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 54 00 	call	0xa8	; 0xa8 <main>
  78:	0c 94 76 00 	jmp	0xec	; 0xec <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <system_init>:
}

void system_init(void)
{
	/* Initialize GPIO */
	DIR_DDR |= (1<<DIR_PIN);	// Enable pullups on DIR output
  80:	26 9a       	sbi	0x04, 6	; 4
	PWM_DDR |= (1<<PWM_PIN);	// Enable pullups on PWM output
  82:	53 9a       	sbi	0x0a, 3	; 10
	DIR_PORT |= (1<<DIR_PIN);	// Set default direction to TBD (depends on hardware configuration)
  84:	2e 9a       	sbi	0x05, 6	; 5
	PWM_PORT &= ~(1<<PWM_PIN);	// Set initial level to logic low (no motor spinning)
  86:	5b 98       	cbi	0x0b, 3	; 11
	  - no interrupt
	  - starting OC2B == 0
	  - timer rate == 62.5 kHz
	  - Fast PWM
	*/
	PWM_OCR = 0;						// Set initial level to 0
  88:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
	TCCR1B |= (1<<COM2B1);				// Clear PWM output on match, set PWM output @ bottom (OC2B = ticks_high / 256)
  8c:	e1 e8       	ldi	r30, 0x81	; 129
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	80 81       	ld	r24, Z
  92:	80 62       	ori	r24, 0x20	; 32
  94:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM21) | (1<<WGM20);	// Set Timer 2 for Fast PWM mode	
  96:	80 81       	ld	r24, Z
  98:	83 60       	ori	r24, 0x03	; 3
  9a:	80 83       	st	Z, r24
	TCCR2B |= (1<<CS22) | (1<<CS21);	// Set Timer for clk/256 == 62500 Hz (w/16 MHz clk in)	
  9c:	e1 eb       	ldi	r30, 0xB1	; 177
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	80 81       	ld	r24, Z
  a2:	86 60       	ori	r24, 0x06	; 6
  a4:	80 83       	st	Z, r24
  a6:	08 95       	ret

000000a8 <main>:
/* Function Declarations */
void system_init(void);

int main(void)
{
    system_init();
  a8:	0e 94 40 00 	call	0x80	; 0x80 <system_init>
    while (1) 
    {
		// Ramp up/down stepper motor
		for (uint8_t i=0; i<255; i++)
		{
			PWM_OCR = i;
  ac:	e4 eb       	ldi	r30, 0xB4	; 180
  ae:	f0 e0       	ldi	r31, 0x00	; 0
{
    system_init();
    while (1) 
    {
		// Ramp up/down stepper motor
		for (uint8_t i=0; i<255; i++)
  b0:	80 e0       	ldi	r24, 0x00	; 0
		{
			PWM_OCR = i;
  b2:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b4:	af e3       	ldi	r26, 0x3F	; 63
  b6:	bc e9       	ldi	r27, 0x9C	; 156
  b8:	11 97       	sbiw	r26, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <main+0x10>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <main+0x16>
  be:	00 00       	nop
{
    system_init();
    while (1) 
    {
		// Ramp up/down stepper motor
		for (uint8_t i=0; i<255; i++)
  c0:	8f 5f       	subi	r24, 0xFF	; 255
  c2:	8f 3f       	cpi	r24, 0xFF	; 255
  c4:	b1 f7       	brne	.-20     	; 0xb2 <main+0xa>
			PWM_OCR = i;
			_delay_ms(10);
		}
		for (uint8_t i=255; i>0; i--)
		{
			PWM_OCR = i;
  c6:	80 83       	st	Z, r24
  c8:	af e3       	ldi	r26, 0x3F	; 63
  ca:	bc e9       	ldi	r27, 0x9C	; 156
  cc:	11 97       	sbiw	r26, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <main+0x24>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <main+0x2a>
  d2:	00 00       	nop
		for (uint8_t i=0; i<255; i++)
		{
			PWM_OCR = i;
			_delay_ms(10);
		}
		for (uint8_t i=255; i>0; i--)
  d4:	81 50       	subi	r24, 0x01	; 1
  d6:	b9 f7       	brne	.-18     	; 0xc6 <main+0x1e>
  d8:	bf ef       	ldi	r27, 0xFF	; 255
  da:	27 ea       	ldi	r18, 0xA7	; 167
  dc:	81 e6       	ldi	r24, 0x61	; 97
  de:	b1 50       	subi	r27, 0x01	; 1
  e0:	20 40       	sbci	r18, 0x00	; 0
  e2:	80 40       	sbci	r24, 0x00	; 0
  e4:	e1 f7       	brne	.-8      	; 0xde <main+0x36>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <main+0x40>
  e8:	00 00       	nop
  ea:	e2 cf       	rjmp	.-60     	; 0xb0 <main+0x8>

000000ec <_exit>:
  ec:	f8 94       	cli

000000ee <__stop_program>:
  ee:	ff cf       	rjmp	.-2      	; 0xee <__stop_program>
